package ${schema.package};

import com.core.infrastructure.buffer.UnsafeBuffer;
import com.core.infrastructure.encoding.Encodable;
import com.core.infrastructure.encoding.ObjectEncoder;
import com.core.infrastructure.messages.Decoder;
import com.core.infrastructure.messages.Field;
import org.agrona.DirectBuffer;

/**
#if ( $message.description )
 * A decoder for ${message.description}.
#else
 * A decoder for the {@code ${message.nameCap}} message.
#end
 */
public class ${message.nameCap}Decoder implements Encodable, Decoder#if ( !$message.decoderInterface.isBlank() ), ${message.decoderInterface}#end {

    /**
     * The message type value.
     */
    public static final byte MESSAGE_TYPE = ${message.id};
    /**
     * The name of the message.
     */
    public static final String MESSAGE_NAME = "${message.name}";
    /**
     * The entity name.
     */
#if ( $message.entity )
    public static final String ENTITY_NAME = "${message.entity}";
#else
    public static final String ENTITY_NAME = null;
#end
    /**
     * The base entity name.
     */
#if ( $message.baseEntity )
    public static final String BASE_ENTITY_NAME = "${message.baseEntity}";
#elseif ( $message.entity )
    public static final String BASE_ENTITY_NAME = "${message.entity}";
#else
    public static final String BASE_ENTITY_NAME = null;
#end
    /**
     * The version of the schema that generated this decoder.
     */
    public static final byte SCHEMA_VERSION = ${schema.version};
    /**
     * The message fields.
     */
    public static final Field[] FIELDS = new Field[] {
#foreach ( $field in $message.fields )
            new Field("${field.name}", ${field.type}.class, ${field.required}, ${field.header}, ${field.metadata}, ${field.impliedDecimals}, ${field.primaryKey}, ${field.key}, ${field.foreignKey}),
#end
    };

    private DirectBuffer buffer;
    private int offset;
    private int length;
#if ( $message.optionalFields.size() > 0 )
    private boolean optionalsLoaded;
    private long messageVersion;
#end

#foreach ( $field in $message.optionalFields )
#if ( $field.type == 'DirectBuffer' )
    private final $field.type $field.name = new UnsafeBuffer();
#elseif ( $field.primitive )
    private $field.type ${field.name};
#else
    private $field.type ${field.name};
    private byte value${field.nameCap};
#end
    private long ${field.name}Version;
#end

    /**
     * Creates an empty {@code ${message.nameCap}Decoder}.
     */
    public ${message.nameCap}Decoder() {
    }

    @Override
    public ${message.nameCap}Decoder wrap(DirectBuffer buffer) {
        return wrap(buffer, 0, buffer.capacity());
    }

    @Override
    public ${message.nameCap}Decoder wrap(DirectBuffer buffer, int offset, int length) {
        this.buffer = buffer;
        this.offset = offset;
        this.length = length;
#if ( $message.optionalFields.size() > 0 )
        optionalsLoaded = false;
        ++messageVersion;
#end
        return this;
    }
#foreach ( $field in $message.requiredFields )

    /**
#if ( $field.Description )
     * Returns ${field.description}.
     *
     * @return ${field.description}
#else
     * Returns the value of the {@code ${field.name}} field.
     *
     * @return the value of the {@code ${field.name}} field
#end
     */
#if ( $field.header )
    @Override
#end
    public $field.type get${field.nameCap}() {
#if ( ${field.primitive} )
        return buffer.get${field.typeCap}(offset + ${field.offset});
#else
        return ${field.Type}.valueOf(buffer.getByte(offset + ${field.offset}));
#end
    }
#if ( !$field.primitive )

    /**
#if ( $field.Description )
     * Returns ${field.description}.
     *
     * @return ${field.description}
#else
     * Returns the value of the {@code ${field.name}} field.
     *
     * @return the value of the {@code ${field.name}} field
#end
     */
    public byte ${field.name}AsByte() {
        return buffer.getByte(offset + ${field.offset});
    }
#end
#if ( $field.version > 1 )

    /**
     * Returns true if the value of the {@code ${field.name}} field is present in the message.
     *
     * @return true if the value of the {@code ${field.name}} field is present in the message
     */
    public boolean is${field.nameCap}Present() {
        return SCHEMA_VERSION >= getSchemaVersion();
    }
#end
#end
#foreach ( $field in $message.optionalFields )

    /**
     * Returns true if the value of the {@code ${field.name}} field is present in the message.
     *
     * @return true if the value of the {@code ${field.name}} field is present in the message
     */
    public boolean is${field.nameCap}Present() {
        loadOptionalFields();
        return messageVersion == ${field.name}Version;
    }

    /**
#if ( $field.Description )
     * Returns ${field.description}.
     *
     * @return ${field.description}
#else
     * Returns the value of the {@code ${field.name}} field.
     *
     * @return the value of the {@code ${field.name}} field
#end
     */
    public $field.type get${field.nameCap}() {
        loadOptionalFields();
#if ( $field.primitive )
        return ${field.name};
#else
        return messageVersion == ${field.name}Version ? ${field.name} : null;
#end
    }
#if ( $field.type == 'DirectBuffer' )

    /**
#if ( $field.Description )
     * Returns ${field.description}.
     *
     * @return ${field.description}
#else
     * Returns the value of the {@code ${field.name}} field.
     *
     * @return the value of the {@code ${field.name}} field
#end
     */
    public String ${field.name}AsString() {
        loadOptionalFields();
        return messageVersion == ${field.name}Version ? ${field.name}.getStringWithoutLengthAscii(0, ${field.name}.capacity()) : null;
    }
#elseif ( !$field.primitive )

    /**
#if ( $field.Description )
     * Returns ${field.description}.
     *
     * @return ${field.description}
#else
     * Returns the value of the {@code ${field.name}} field.
     *
     * @return the value of the {@code ${field.name}} field
#end
     */
    public byte ${field.name}AsByte() {
        loadOptionalFields();
        return value${field.nameCap};
    }
#end
#end
#if ( $message.optionalFields.size() > 0 )

    private void loadOptionalFields() {
        if (optionalsLoaded) {
            return;
        }

        var position = offset + getOptionalFieldsIndex();
        while (position < offset + length) {
            var id = buffer.getByte(position++);
            var len = (int) buffer.getByte(position++);
            if (len == -1) {
                len = buffer.getShort(position);
                position += 2;
            }
            switch (id) {
#foreach ( $field in $message.optionalFields )
                case ${field.id}:
#if ( ${field.primitive} )
                    $field.name = buffer.get${field.typeCap}(position);
#elseif ( ${field.type} == 'DirectBuffer' )
                    ${field.name}.wrap(buffer, position, len);
#else
                    value${field.nameCap} = buffer.getByte(position);
                    $field.name = ${field.Type}.valueOf(value${field.nameCap});
#end
                    ${field.name}Version = messageVersion;
                    break;
#end
                default:
                    break;
            }
            position += len;
        }
    }
#end

    @Override
    public DirectBuffer buffer() {
        return buffer;
    }

    @Override
    public int offset() {
        return offset;
    }

    @Override
    public int length() {
        return length;
    }

    @Override
    public String messageName() {
        return MESSAGE_NAME;
    }

    @Override
    public String entityName() {
        return ENTITY_NAME;
    }

    @Override
    public String baseEntityName() {
        return BASE_ENTITY_NAME;
    }

    @Override
    public byte messageType() {
        return MESSAGE_TYPE;
    }

    @Override
    public Field[] fields() {
        return FIELDS;
    }

    @Override
    public int version() {
        return SCHEMA_VERSION;
    }

    @Override
    public Object get(String name) {
        switch (name) {
#foreach ( $field in $message.requiredFields )
            case "$field.name":
#if ( $field.version > 1 )
                return is${field.nameCap}Present() ? get${field.nameCap}() : null;
#else
                return get${field.nameCap}();
#end
#end
#foreach ( $field in $message.optionalFields )
            case "$field.name":
                return is${field.nameCap}Present() ? get${field.nameCap}() : null;
#end
            default:
                throw new IllegalArgumentException("unknown field name: " + name);
        }
    }

    @Override
    public long integerValue(String name) {
        switch (name) {
#foreach ( $field in $message.fields )
#if ( $field.type == 'byte' || $field.type == 'short' || $field.type == 'int' || $field.type == 'long' )
            case "$field.name":
                return get${field.nameCap}();
#end
#end
            default:
                throw new IllegalArgumentException("unknown field name: " + name);
        }
    }

    @Override
    public double realValue(String name) {
        switch (name) {
#foreach ( $field in $message.fields )
#if ( $field.type == 'float' || $field.type == 'double' )
            case "$field.name":
                return get${field.nameCap}();
#end
#end
            default:
                throw new IllegalArgumentException("unknown field name: " + name);
        }
    }

    @Override
    public boolean isPresent(String name) {
        switch (name) {
#foreach ( $field in $message.requiredFields )
            case "$field.name":
#if ( $field.version > 1 )
                return is${field.nameCap}Present();
#else
                return true;
#end
#end
#foreach ( $field in $message.optionalFields )
            case "$field.name":
                return is${field.nameCap}Present();
#end
            default:
                throw new IllegalArgumentException("unknown field name: " + name);
        }
    }

    @Override
    public Field field(String name) {
        for (var field : FIELDS) {
            if (field.getName().equals(name)) {
                return field;
            }
        }
        throw new IllegalArgumentException("unknown field name: " + name);
    }

    @Override
    public void encode(ObjectEncoder encoder) {
        encoder.openMap();
#foreach ( $field in $message.requiredFields )
#if ( $field.version > 1 )
        if (is${field.nameCap}Present()) {
#if ( $field.type == 'byte' || $field.type == 'short' || $field.type == 'int' || $field.type == 'long' )
            encoder.string("${field.name}").number(get${field.nameCap}());
#else
            encoder.string("${field.name}").object(get${field.nameCap}());
#end
        }
#else
#if ( $field.type == 'byte' || $field.type == 'short' || $field.type == 'int' || $field.type == 'long' )
        encoder.string("${field.name}").number(get${field.nameCap}());
#else
        encoder.string("${field.name}").object(get${field.nameCap}());
#end
#end
#end
#foreach ( $field in $message.optionalFields )
        if (is${field.nameCap}Present()) {
#if ( $field.type == 'byte' || $field.type == 'short' || $field.type == 'int' || $field.type == 'long' )
            encoder.string("${field.name}").number(get${field.nameCap}());
#elseif ( $field.type == 'DirectBuffer' )
            encoder.string("${field.name}").string(get${field.nameCap}());
#else
            encoder.string("${field.name}").object(get${field.nameCap}());
#end
        }
#end
        encoder.closeMap();
    }

    @Override
    public String toString() {
        return toEncodedString();
    }
}